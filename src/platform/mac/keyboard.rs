use std::ffi::c_ushort;

use icrate::AppKit::{NSEventModifierFlags, NSEventModifierFlagShift, NSEventModifierFlagControl, NSEventModifierFlagCommand};

use crate::keyboard::{Key, Modifiers};

pub fn key_from_code(key_code: c_ushort) -> Key {
	match key_code {
		0x00 => Key::A,
		0x01 => Key::S,
		0x02 => Key::D,
		0x03 => Key::F,
		0x04 => Key::H,
		0x05 => Key::G,
		0x06 => Key::Z,
		0x07 => Key::X,
		0x08 => Key::C,
		0x09 => Key::V,
		//0x0a => Key::IntlBackslash,
		0x0b => Key::B,
		0x0c => Key::Q,
		0x0d => Key::W,
		0x0e => Key::E,
		0x0f => Key::R,
		0x10 => Key::Y,
		0x11 => Key::T,
		0x12 => Key::Key1,
		0x13 => Key::Key2,
		0x14 => Key::Key3,
		0x15 => Key::Key4,
		0x16 => Key::Key6,
		0x17 => Key::Key5,
		//0x18 => Key::Equal,
		0x19 => Key::Key9,
		0x1a => Key::Key7,
		//0x1b => Key::Minus,
		0x1c => Key::Key8,
		0x1d => Key::Key0,
		//0x1e => Key::BracketRight,
		0x1f => Key::O,
		0x20 => Key::U,
		//0x21 => Key::BracketLeft,
		0x22 => Key::I,
		0x23 => Key::P,
		0x24 => Key::Enter,
		0x25 => Key::L,
		0x26 => Key::J,
		//0x27 => Key::Quote,
		0x28 => Key::K,
		//0x29 => Key::Semicolon,
		//0x2a => Key::Backslash,
		//0x2b => Key::Comma,
		//0x2c => Key::Slash,
		0x2d => Key::N,
		0x2e => Key::M,
		0x2f => Key::Period,
		0x30 => Key::Tab,
		0x31 => Key::Space,
		0x32 => Key::Delete,
		0x33 => Key::BackSpace,
		//0x34 => Key::NumpadEnter,
		0x35 => Key::Escape,
		//0x36 => Key::MetaRight,
		//0x37 => Key::MetaLeft,
		//0x38 => Key::ShiftLeft,
		//0x39 => Key::CapsLock,
		//0x3a => Key::AltLeft,
		//0x3b => Key::ControlLeft,
		//0x3c => Key::ShiftRight,
		//0x3d => Key::AltRight,
		//0x3e => Key::ControlRight,
		//0x3f => Key::Fn,
		//0x40 => Key::F17,
		//0x41 => Key::NumpadDecimal,
		//0x43 => Key::NumpadMultiply,
		//0x45 => Key::NumpadAdd,
		//0x47 => Key::NumLock,
		//0x48 => Key::AudioVolumeUp,
		//0x49 => Key::AudioVolumeDown,
		//0x4a => Key::AudioVolumeMute,
		//0x4b => Key::NumpadDivide,
		//0x4c => Key::NumpadEnter,
		//0x4e => Key::NumpadSubtract,
		//0x4f => Key::F18,
		//0x50 => Key::F19,
		//0x51 => Key::NumpadEqual,
		0x52 => Key::Numpad0,
		0x53 => Key::Numpad1,
		0x54 => Key::Numpad2,
		0x55 => Key::Numpad3,
		0x56 => Key::Numpad4,
		0x57 => Key::Numpad5,
		0x58 => Key::Numpad6,
		0x59 => Key::Numpad7,
		//0x5a => Key::F20,
		0x5b => Key::Numpad8,
		0x5c => Key::Numpad9,
		//0x5d => Key::IntlYen,
		//0x5e => Key::IntlRo,
		//0x5f => Key::NumpadComma,
		0x60 => Key::F5,
		0x61 => Key::F6,
		0x62 => Key::F7,
		0x63 => Key::F3,
		0x64 => Key::F8,
		0x65 => Key::F9,
		//0x66 => Key::Lang2,
		0x67 => Key::F11,
		//0x68 => Key::Lang1,
		0x69 => Key::F13,
		//0x6a => Key::F16,
		0x6b => Key::F14,
		0x6d => Key::F10,
		//0x6e => Key::ContextMenu,
		0x6f => Key::F12,
		//0x71 => Key::F15,
		0x72 => Key::Insert,
		0x73 => Key::Home,
		0x74 => Key::PageUp,
		0x75 => Key::Delete,
		0x76 => Key::F4,
		0x77 => Key::End,
		0x78 => Key::F2,
		0x79 => Key::PageDown,
		0x7a => Key::F1,
		0x7b => Key::Left,
		0x7c => Key::Right,
		0x7d => Key::Down,
		0x7e => Key::Up,
		_ => Key::Unknown,
	}
}

pub fn get_modifiers(flags: NSEventModifierFlags) -> Modifiers {
	let mut modifiers = Modifiers::empty();
	if flags & NSEventModifierFlagShift != 0 {
		modifiers |= Modifiers::SHIFT;
	}

	if flags & NSEventModifierFlagControl != 0 {
		modifiers |= Modifiers::ALT;
	}

	if flags & NSEventModifierFlagCommand != 0 {
		modifiers |= Modifiers::CONTROL;
	}

	modifiers
}